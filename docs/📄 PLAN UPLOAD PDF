# 📄 PLAN UPLOAD PDF - Architecture Complète

## 🎯 **OBJECTIF**
Intégrer la génération et l'upload automatique des PDF lors de la finalisation des fiches, avec intégration transparente dans l'automatisation Make existante.

---

## 🏗️ **ARCHITECTURE PROPOSÉE**

### **Workflow Complet : Frontend → Supabase → Make**

```mermaid
graph TD
    A[Utilisateur clique "Finaliser"] --> B[Générer PDF programmatiquement]
    B --> C[Upload PDF vers Supabase Storage]
    C --> D[Sauver URL PDF en BDD]
    D --> E[Finaliser fiche statut = 'Complété']
    E --> F[Webhook Supabase déclenche Make]
    F --> G[Make télécharge PDF via URL publique]
    G --> H[Make organise Drive + upload Monday]
```

---

## 📊 **STRUCTURE DONNÉES**

### **Base de Données (Supabase)**
```sql
-- Ajouter colonne URL PDF dans table fiches
ALTER TABLE fiches ADD COLUMN pdf_url TEXT;

-- Exemple de données
pdf_url: "https://xyz.supabase.co/storage/v1/object/public/fiche-pdfs/fiche-123.pdf"
```

### **Supabase Storage**
```
📁 Bucket "fiche-pdfs" (nouveau bucket)
├── 📄 fiche-092388c0-6044-4159-b099-aa66275f27fb.pdf
├── 📄 fiche-456def78-9012-3456-7890-123456789abc.pdf
└── 📄 fiche-789abc12-3456-7890-1234-56789abcdef0.pdf

-- Pattern nommage : fiche-{uuid}.pdf
-- URLs publiques automatiques via Supabase
```

---

## 🔧 **IMPLÉMENTATION TECHNIQUE**

### **1. Adaptation Génération PDF Existante**

#### **Dependencies à ajouter**
```bash
npm install html2pdf.js
```

#### **Fonction generatePDFBlob() - Réutilise PDFTemplate existant**
```javascript
// src/utils/pdfGenerator.js
import html2pdf from 'html2pdf.js'
import { renderToString } from 'react-dom/server'
import PDFTemplate from '../components/PDFTemplate' // ← RÉUTILISE TON COMPOSANT

export const generatePDFBlob = async (formData) => {
  // 1. Utilise TON PDFTemplate existant (même rendu)
  const htmlContent = renderToString(<PDFTemplate formData={formData} />)
  
  // 2. Convertir en PDF blob avec TES styles CSS
  const pdfBlob = await html2pdf()
    .set({
      margin: [20, 15, 20, 15],
      filename: `fiche-${formData.id}.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2, useCORS: true },
      jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
    })
    .from(htmlContent)
    .outputPdf('blob')
  
  return pdfBlob
}
```

#### **Unification bouton "Télécharger PDF" du modal**
```javascript
// Modifier handleGeneratePDF dans FicheSecurite.jsx
const handleGeneratePDF = async () => {
  // Générer le MÊME PDF que l'upload automatique
  const pdfBlob = await generatePDFBlob(formData)
  
  // Télécharger côté utilisateur (remplace window.print)
  const url = URL.createObjectURL(pdfBlob)
  const a = document.createElement('a')
  a.href = url
  a.download = `fiche-${formData.nom}.pdf`
  a.click()
  URL.revokeObjectURL(url)
}
```

### **2. Upload PDF vers Supabase Storage**

#### **Fonction uploadPDFToStorage()**
```javascript
// src/utils/pdfUpload.js
import { supabase } from '../lib/supabaseClient'

export const uploadPDFToStorage = async (pdfBlob, ficheId) => {
  try {
    const fileName = `fiche-${ficheId}.pdf`
    const filePath = fileName
    
    // 1. Upload vers Supabase Storage
    const { data, error } = await supabase.storage
      .from('fiche-pdfs')
      .upload(filePath, pdfBlob, {
        cacheControl: '3600',
        upsert: true, // Remplacer si existe déjà
        contentType: 'application/pdf'
      })

    if (error) throw error

    // 2. Récupérer URL publique
    const { data: urlData } = supabase.storage
      .from('fiche-pdfs')
      .getPublicUrl(filePath)

    return {
      success: true,
      url: urlData.publicUrl,
      path: filePath
    }
  } catch (error) {
    console.error('Erreur upload PDF:', error)
    return {
      success: false,
      error: error.message
    }
  }
}
```

### **3. Mise à jour handleFinaliser()**

#### **FicheSecurite.jsx - Version modifiée**
```javascript
// Imports supplémentaires
import { generatePDFBlob } from '../utils/pdfGenerator'
import { uploadPDFToStorage } from '../utils/pdfUpload'

const handleFinaliser = async () => {
  try {
    // 1. Sauvegarder fiche (comme avant)
    const saveResult = await handleSave()
    if (!saveResult.success) return
    
    // 2. Générer et uploader PDF
    console.log('📄 Génération PDF...')
    const pdfBlob = await generatePDFBlob(formData)
    
    console.log('☁️ Upload PDF vers Storage...')
    const uploadResult = await uploadPDFToStorage(pdfBlob, formData.id)
    
    if (uploadResult.success) {
      // 3. Sauver URL PDF en BDD
      console.log('💾 Sauvegarde URL PDF...')
      await updateField('pdf_url', uploadResult.url)
      await handleSave() // Re-save avec l'URL PDF
    }
    
    // 4. Finaliser fiche (déclenche webhook Make)
    const currentStatus = saveResult.data?.statut || formData?.statut
    if (currentStatus !== 'Complété') {
      console.log('🏁 Finalisation fiche...')
      await finaliserFiche()
    }
    
    // 5. Afficher modal
    setShowConfirmModal(true)
    
  } catch (error) {
    console.error('Erreur finalisation:', error)
    alert('Erreur lors de la finalisation: ' + error.message)
  }
}
```

---

## 🔗 **INTÉGRATION MAKE EXISTANTE**

### **Webhook Supabase (aucun changement)**
- **Déclencheur** : Statut fiche = "Complété" (comme actuellement)
- **Données reçues** : Toutes les colonnes + nouvelle colonne `pdf_url`

### **Nouveaux modules Make à ajouter**

#### **Module 1 : HTTP GET - Télécharger PDF**
```json
{
  "url": "{{pdf_url}}",
  "method": "GET",
  "headers": {},
  "parseResponse": false
}
```
**Sortie** : Fichier PDF complet (binaire)

#### **Module 2 : Google Drive - Upload PDF**
```json
{
  "folderId": "{{dossier_proprietaire_id}}",
  "fileName": "fiche-logement.pdf",
  "file": "{{output_from_http_module}}"
}
```

#### **Module 3 : Monday - Upload PDF**
```json
{
  "itemId": "{{monday_item_id}}",
  "file": "{{output_from_http_module}}",
  "columnId": "files_colonne_id"
}
```

---

## 📁 **ORGANISATION GOOGLE DRIVE**

### **Structure finale souhaitée**
```
📁 2. DOSSIERS PROPRIETAIRES/
├── 📁 1163. Florence TEISSIER - Saint Pons/
│   ├── 📁 3. INFORMATIONS LOGEMENT/
│   │   ├── 📁 1. Fiche logement/
│   │   │   └── 📄 fiche-logement.pdf ← NOUVEAU
│   │   │   └── 📄 fiche-menage.pdf ← FUTUR
│   │   ├── 📁 2. Photos Visite Logement/
│   │   ├── 📁 3. Accès au logement/
│   │   ├── 📁 4. Tour général du logement/
│   │   ├── 📁 5. Tuto équipements/
│   │   └── 📁 6. Identifiants Wifi/
```

### **Mapping automatique dans Make**
```javascript
// Génération nom dossier propriétaire
const nomDossier = `${numero_bien}. ${prenom} ${nom} - ${ville}`

// Création arborescence si inexistante
const cheminComplet = `2. DOSSIERS PROPRIETAIRES/${nomDossier}/3. INFORMATIONS LOGEMENT/1. Fiche logement/`
```

---

## ⚡ **AVANTAGES DE CETTE APPROCHE**

### ✅ **Conservation mise en page**
- **PDF identique** : Réutilise PDFTemplate.jsx existant
- **Contrôle total** : Garde ton système de génération actuel
- **Unification** : Même PDF pour téléchargement manuel et upload automatique

### ✅ **Intégration transparente**
- **Webhook existant** : Aucune modification de l'automatisation Make
- **Architecture cohérente** : Même pattern que les photos (Storage + URL)
- **Single source of truth** : Une seule automatisation Make

### ✅ **Robustesse**
- **Backup automatique** : PDF sauvegardé dans Supabase Storage
- **URLs publiques** : Accessibles par Make sans authentification
- **Traçabilité** : URL PDF stockée en BDD pour référence

---

## 🧪 **PLAN DE TESTS**

### **Phase 1 : Génération PDF (2h)**
- [ ] Installer html2pdf.js
- [ ] Créer fonction generatePDFBlob()
- [ ] Tester rendu identique au PDF actuel
- [ ] Valider qualité et mise en page

### **Phase 2 : Upload Storage (1h)**
- [ ] Créer bucket "fiche-pdfs" Supabase
- [ ] Créer fonction uploadPDFToStorage()
- [ ] Tester upload + récupération URL publique
- [ ] Valider accessibilité externe

### **Phase 3 : Intégration (1h)**
- [ ] Modifier handleFinaliser() FicheSecurite
- [ ] Ajouter colonne pdf_url en BDD
- [ ] Tester workflow complet Brouillon → Complété
- [ ] Valider déclenchement webhook Make

### **Phase 4 : Make (1h)**
- [ ] Ajouter module HTTP GET dans Make
- [ ] Tester téléchargement PDF via URL
- [ ] Configurer upload Google Drive
- [ ] Valider upload Monday

---

## 🚀 **PROCHAINES ÉTAPES**

### **Immédiat**
1. **Setup base** : Bucket Supabase + colonne BDD
2. **Implémentation** : generatePDFBlob() + uploadPDFToStorage()
3. **Tests locaux** : Génération + upload PDF

### **Court terme**
4. **Intégration** : Modifier handleFinaliser()
5. **Tests Make** : HTTP GET + upload Drive/Monday
6. **Validation** : Workflow complet end-to-end

### **Futur**
7. **PDF Ménage** : Nouveau template PDFMenageTemplate
8. **Organisation photos** : Dispatch photos par dossiers Drive
9. **Optimisations** : Compression PDF, retry logic

---

## 📚 **NOTES TECHNIQUES**

### **Alternatives considérées**
- **Puppeteer** : Trop lourd pour le frontend
- **Base64 webhook** : Limite taille payload Make
- **API externe** : Complexité supplémentaire inutile

### **Limitations connues**
- **Taille PDF** : html2pdf recommandé < 10MB
- **Performance** : Génération ~2-5s selon complexité fiche
- **Compatibilité** : Supporté Chrome/Firefox/Safari modernes

### **Monitoring recommandé**
- Log erreurs génération PDF
- Suivi taux succès upload Storage
- Monitoring déclenchements webhook Make
