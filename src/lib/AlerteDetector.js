// src/lib/AlerteDetector.js

// G√©n√®re un aper√ßu synth√©tique du logement
export const generateApercu = (formData) => {
  const logement = formData.section_logement || {}
  const visite = formData.section_visite || {}
  const equipements = formData.section_equipements || {}
  const avis = formData.section_avis || {}
  
  // Nom du logement
  const nom = logement.typologie || 'Logement'
  
  // Capacit√©
  const capacite = {
    personnes: logement.nombre_personnes_max || 'Non renseign√©',
    chambres: visite.nombre_chambres || 'Non renseign√©',
    lits: logement.nombre_lits || 'Non renseign√©',
    surface: logement.surface ? `${logement.surface} m¬≤` : 'Non renseign√©'
  }
  
  // √âquipements cl√©s
  const wifi = {
    disponible: equipements.wifi_statut === 'oui',
    texte: equipements.wifi_statut === 'oui' ? 'Disponible' : 
           equipements.wifi_statut === 'en_cours' ? 'En cours' : 'Non disponible'
  }
  
  const parking = {
    disponible: equipements.parking_type && (equipements.parking_type === 'rue' || equipements.parking_type === 'sur_place' || equipements.parking_type === 'payant'),
    texte: equipements.parking_type === 'rue' ? 'Gratuit (rue)' :
           equipements.parking_type === 'sur_place' ? 'Gratuit (sur place)' :
           equipements.parking_type === 'payant' ? 'Payant' : 'Non disponible'
  }
  
  // Atouts
  const atouts = []
  const atoutsLogement = avis.atouts_logement || {}
  if (atoutsLogement.lumineux) atouts.push('Lumineux')
  if (atoutsLogement.central) atouts.push('Central')
  if (atoutsLogement.paisible) atouts.push('Paisible')
  if (atoutsLogement.tranquille) atouts.push('Tranquille')
  if (atoutsLogement.vue_panoramique) atouts.push('Vue panoramique')
  if (atoutsLogement.spacieux) atouts.push('Spacieux')
  if (atoutsLogement.charmant) atouts.push('Charmant')
  if (atoutsLogement.renove) atouts.push('R√©nov√©')
  if (wifi.disponible) atouts.push('WiFi')
  if (equipements.parking_type === 'rue') atouts.push('Parking gratuit')
  if (equipements.parking_type === 'sur_place') atouts.push('Parking gratuit')
  
  
  return {
    nom,
    capacite,
    equipements: { wifi, parking },
    atouts
  }
}

// D√©tecte les alertes dans la fiche
export const detectAlertes = (formData) => {
  const alertes = {
    critiques: [],
    moderees: [],
    elementsAbimes: []
  }
  
  const avis = formData.section_avis || {}
  const reglementation = formData.section_reglementation || {}
  const equipements = formData.section_equipements || {}
  const securite = formData.section_securite || {}
  
  // ALERTES CRITIQUES (rouge)
  
  // Zone √† risques
  if (avis.quartier_securite === 'zone_risques') {
    alertes.critiques.push({
      icone: 'üö®',
      titre: 'Zone √† risques d√©tect√©e',
      message: 'Le quartier est class√© comme zone √† risques',
      action: 'V√©rifications suppl√©mentaires recommand√©es'
    })
  }
  
  // Logement en mauvais √©tat
  if (avis.logement_etat_general === 'mauvais') {
    alertes.critiques.push({
      icone: '‚ö†Ô∏è',
      titre: '√âtat g√©n√©ral mauvais',
      message: 'Le logement n√©cessite des r√©novations importantes',
      action: 'Travaux requis avant mise en location'
    })
  }
  
  // Propret√© insuffisante
  if (avis.logement_proprete === 'sale') {
    alertes.critiques.push({
      icone: 'üßπ',
      titre: 'Propret√© insuffisante',
      message: 'Le logement n√©cessite un nettoyage en profondeur',
      action: 'Grand m√©nage obligatoire'
    })
  }
  
  // Pas de d√©tecteur de fum√©e
  const detecteurFumee = securite.equipements?.includes('D√©tecteur de fum√©e')
  if (!detecteurFumee) {
    alertes.critiques.push({
      icone: 'üî•',
      titre: 'D√©tecteur de fum√©e manquant',
      message: 'Obligatoire selon la r√©glementation',
      action: 'Installation imm√©diate requise'
    })
  }
  
  // ALERTES MOD√âR√âES (orange)
  
  // Quartier d√©favoris√©
  if (avis.quartier_types?.includes('quartier_defavorise')) {
    alertes.moderees.push({
      icone: 'üìç',
      titre: 'Quartier d√©favoris√©',
      message: 'Peut impacter l\'attractivit√© du logement'
    })
  }
  
  // Perturbations d√©tect√©es
  if (avis.quartier_perturbations === 'oui') {
    alertes.moderees.push({
      icone: 'üîä',
      titre: 'Perturbations signal√©es',
      message: avis.quartier_perturbations_details || 'Nuisances sonores ou autres perturbations'
    })
  }
  
  // Vis-√†-vis important
  if (avis.logement_vis_a_vis === 'important') {
    alertes.moderees.push({
      icone: 'üëÄ',
      titre: 'Vis-√†-vis important',
      message: 'Manque d\'intimit√©, peut impacter l\'exp√©rience'
    })
  }
  
  // WiFi non disponible
  if (equipements.wifi_statut === 'non') {
    alertes.moderees.push({
      icone: 'üì∂',
      titre: 'WiFi non disponible',
      message: '√âquipement essentiel manquant pour la plupart des voyageurs'
    })
  }
  
  // D√©marches r√©glementaires requises
  if (reglementation.ville_changement_usage && reglementation.ville_changement_usage !== 'NON !') {
    alertes.moderees.push({
      icone: 'üìã',
      titre: 'Changement d\'usage requis',
      message: 'D√©marche administrative √† effectuer en mairie'
    })
  }
  
  if (reglementation.ville_declaration_simple && reglementation.ville_declaration_simple !== 'NON !') {
    alertes.moderees.push({
      icone: 'üìÑ',
      titre: 'D√©claration simple requise',
      message: 'Formulaire Cerfa √† d√©poser en mairie'
    })
  }
  
  // √âL√âMENTS AB√éM√âS
  const sectionsAbimes = [
    { key: 'section_cuisine_1', nom: 'Cuisine', icone: 'üç≥' },
    { key: 'section_salon_sam', nom: 'Salon/SAM', icone: 'üõãÔ∏è' },
    { key: 'section_chambres', nom: 'Chambres', icone: 'üõèÔ∏è' },
    { key: 'section_salle_de_bains', nom: 'Salle de bains', icone: 'üöø' },
    { key: 'section_equip_spe_exterieur', nom: 'Ext√©rieur', icone: 'üè°' }
  ]
  
  sectionsAbimes.forEach(({ key, nom, icone }) => {
    const section = formData[key]
    if (!section) return
    
    // V√©rifier les √©l√©ments ab√Æm√©s dans la section
    if (section.elements_abimes === true) {
      alertes.elementsAbimes.push({ espace: nom, icone })
    }
    
    // Pour les chambres (accord√©ons)
    if (key === 'section_chambres') {
      for (let i = 1; i <= 6; i++) {
        const chambre = section[`chambre_${i}`]
        if (chambre?.elements_abimes === true) {
          alertes.elementsAbimes.push({ 
            espace: `Chambre ${i}`, 
            icone: 'üõèÔ∏è' 
          })
        }
      }
    }
    
    // Pour les SDB (accord√©ons)
    if (key === 'section_salle_de_bains') {
      for (let i = 1; i <= 6; i++) {
        const sdb = section[`salle_de_bain_${i}`]
        if (sdb?.elements_abimes === true) {
          alertes.elementsAbimes.push({ 
            espace: `Salle de bain ${i}`, 
            icone: 'üöø' 
          })
        }
      }
    }
    
    // Pour les √©quipements ext√©rieurs
    if (key === 'section_equip_spe_exterieur') {
      if (section.garage_elements_abimes === true) {
        alertes.elementsAbimes.push({ espace: 'Garage', icone: 'üöó' })
      }
      if (section.buanderie_elements_abimes === true) {
        alertes.elementsAbimes.push({ espace: 'Buanderie', icone: 'üß∫' })
      }
      if (section.autres_pieces_elements_abimes === true) {
        alertes.elementsAbimes.push({ espace: 'Autres pi√®ces', icone: 'üè†' })
      }
    }
  })
  
  return alertes
}